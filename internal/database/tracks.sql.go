// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tracks.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const createTrack = `-- name: CreateTrack :exec
INSERT INTO tracks (name, artist, genre, duration_in_seconds, year, explicit, bpm, key)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
`

type CreateTrackParams struct {
	Name              string
	Artist            string
	Genre             []string
	DurationInSeconds int32
	Year              string
	Explicit          bool
	Bpm               int32
	Key               string
}

func (q *Queries) CreateTrack(ctx context.Context, arg CreateTrackParams) error {
	_, err := q.db.ExecContext(ctx, createTrack,
		arg.Name,
		arg.Artist,
		pq.Array(arg.Genre),
		arg.DurationInSeconds,
		arg.Year,
		arg.Explicit,
		arg.Bpm,
		arg.Key,
	)
	return err
}

const deleteTrack = `-- name: DeleteTrack :exec

DELETE FROM tracks WHERE tracks.name = $1 ANd tracks.artist = $2
`

type DeleteTrackParams struct {
	Name   string
	Artist string
}

func (q *Queries) DeleteTrack(ctx context.Context, arg DeleteTrackParams) error {
	_, err := q.db.ExecContext(ctx, deleteTrack, arg.Name, arg.Artist)
	return err
}

const getTrack = `-- name: GetTrack :one

SELECT name, artist, genre, duration_in_seconds, year, explicit, bpm, key FROM tracks WHERE tracks.name = $1 AND tracks.artist = $2
`

type GetTrackParams struct {
	Name   string
	Artist string
}

func (q *Queries) GetTrack(ctx context.Context, arg GetTrackParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, getTrack, arg.Name, arg.Artist)
	var i Track
	err := row.Scan(
		&i.Name,
		&i.Artist,
		pq.Array(&i.Genre),
		&i.DurationInSeconds,
		&i.Year,
		&i.Explicit,
		&i.Bpm,
		&i.Key,
	)
	return i, err
}
